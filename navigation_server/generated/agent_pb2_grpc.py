# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import navigation_server.generated.agent_pb2 as agent__pb2


GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in agent_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendCmdMultipleResp = channel.unary_stream(
                '/Agent/SendCmdMultipleResp',
                request_serializer=agent__pb2.AgentMsg.SerializeToString,
                response_deserializer=agent__pb2.AgentResponse.FromString,
                _registered_method=True)
        self.SendCmdSingleResp = channel.unary_unary(
                '/Agent/SendCmdSingleResp',
                request_serializer=agent__pb2.AgentMsg.SerializeToString,
                response_deserializer=agent__pb2.AgentResponse.FromString,
                _registered_method=True)
        self.SendCmdNoResp = channel.unary_unary(
                '/Agent/SendCmdNoResp',
                request_serializer=agent__pb2.AgentMsg.SerializeToString,
                response_deserializer=agent__pb2.AgentResponse.FromString,
                _registered_method=True)
        self.SystemdCmd = channel.unary_unary(
                '/Agent/SystemdCmd',
                request_serializer=agent__pb2.SystemdCmdMsg.SerializeToString,
                response_deserializer=agent__pb2.AgentResponseML.FromString,
                _registered_method=True)
        self.NetworkCmd = channel.unary_unary(
                '/Agent/NetworkCmd',
                request_serializer=agent__pb2.NetworkCmdMsg.SerializeToString,
                response_deserializer=agent__pb2.AgentResponse.FromString,
                _registered_method=True)


class AgentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendCmdMultipleResp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCmdSingleResp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCmdNoResp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SystemdCmd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NetworkCmd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendCmdMultipleResp': grpc.unary_stream_rpc_method_handler(
                    servicer.SendCmdMultipleResp,
                    request_deserializer=agent__pb2.AgentMsg.FromString,
                    response_serializer=agent__pb2.AgentResponse.SerializeToString,
            ),
            'SendCmdSingleResp': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCmdSingleResp,
                    request_deserializer=agent__pb2.AgentMsg.FromString,
                    response_serializer=agent__pb2.AgentResponse.SerializeToString,
            ),
            'SendCmdNoResp': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCmdNoResp,
                    request_deserializer=agent__pb2.AgentMsg.FromString,
                    response_serializer=agent__pb2.AgentResponse.SerializeToString,
            ),
            'SystemdCmd': grpc.unary_unary_rpc_method_handler(
                    servicer.SystemdCmd,
                    request_deserializer=agent__pb2.SystemdCmdMsg.FromString,
                    response_serializer=agent__pb2.AgentResponseML.SerializeToString,
            ),
            'NetworkCmd': grpc.unary_unary_rpc_method_handler(
                    servicer.NetworkCmd,
                    request_deserializer=agent__pb2.NetworkCmdMsg.FromString,
                    response_serializer=agent__pb2.AgentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Agent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Agent', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Agent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendCmdMultipleResp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/Agent/SendCmdMultipleResp',
            agent__pb2.AgentMsg.SerializeToString,
            agent__pb2.AgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendCmdSingleResp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Agent/SendCmdSingleResp',
            agent__pb2.AgentMsg.SerializeToString,
            agent__pb2.AgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendCmdNoResp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Agent/SendCmdNoResp',
            agent__pb2.AgentMsg.SerializeToString,
            agent__pb2.AgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SystemdCmd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Agent/SystemdCmd',
            agent__pb2.SystemdCmdMsg.SerializeToString,
            agent__pb2.AgentResponseML.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NetworkCmd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Agent/NetworkCmd',
            agent__pb2.NetworkCmdMsg.SerializeToString,
            agent__pb2.AgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
