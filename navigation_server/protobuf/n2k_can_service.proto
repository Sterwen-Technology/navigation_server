//-------------------------------------------------------------------------------
// Name:        nmea_server.proto
// Purpose:     protobuf and grpc for navigation server data streams
//
// Author:      Laurent Carré
//
// Created:     12/06/2022
// Copyright:   (c) Laurent Carré Sterwen Technology 2021-2023
// Licence:     Eclipse Public License 2.0
//-------------------------------------------------------------------------------

syntax = "proto3";

import "iso_name.proto";
import "nmea2000_classes_iso_gen.proto";
import "nmea2000.proto";

message N2KDeviceMsg {
  uint32 address=1;
  bool changed=2;
  float last_time_seen=3;
  ISOName iso_name=4;
  Pgn126996ClassPb product_information=5;
  Pgn126998ClassPb configuration_information=6;
}

message CAN_ControllerMsg {
  string channel=1;
  string status = 2;
  float incoming_rate = 3;
  float outgoing_rate = 4;
  bool traces_on=5;
  repeated N2KDeviceMsg devices=6;
}

message CANRequest{
  uint32 id = 1;
  string cmd = 2;
}

message CANAck {
  uint32 id=1;
  uint32 messages_count=2;
  uint32 error=3;
}

message CANReadRequest{
  uint32 id=1;
  string client=2;  // client identification
  repeated uint32 select_sources=3; // only the selected sources will be forwarded if empty or equal to 255 all sources are selected
  repeated uint32 reject_sources=4; // all sources from the list are rejected
  repeated uint32 select_pgn=5; // only the PGN in the list are forwarded if the list is empty all PGN are forwarded
  repeated uint32  reject_pgn=6; //PGN in the list are rejected
}

message CANSendRequest {
  uint32 id=1;
  string device=2;  // that is the device name that shall send the message. Shall be created on the CAN server
  nmea2000pb n2k_msg = 3;  // that is the actual message (encoded) to be sent
}

service CAN_ControllerService {
  rpc GetStatus(CANRequest) returns (CAN_ControllerMsg) {}
  rpc StartTrace(CANRequest) returns (CAN_ControllerMsg) {}
  rpc StopTrace(CANRequest) returns (CAN_ControllerMsg) {}
  rpc ReadNmea2000Msg(CANReadRequest) returns (stream nmea2000pb) {}
  rpc SendNmea2000Msg(CANSendRequest) returns (CANAck) {}
}